import React, { useState, useEffect } from 'react';
import { format } from 'date-fns';
import { Table, Badge, Button } from '../ui';
import { Download, AlertTriangle, CheckCircle } from 'lucide-react';

interface ReferralData {
  id: string;
  code: string;
  user: {
    name: string;
    email: string;
  };
  status: string;
  usageCount: number;
  usageLimit: number;
  createdAt: string;
  expiresAt: string | null;
  pointsEarned: number;
}

export default function ReferralTracking() {
  const [referrals, setReferrals] = useState<ReferralData[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchReferrals();
  }, []);

  const fetchReferrals = async () => {
    try {
      const response = await fetch('/api/admin/referrals', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      const data = await response.json();
      setReferrals(data);
    } catch (error) {
      console.error('Failed to fetch referrals:', error);
    } finally {
      setLoading(false);
    }
  };

  const exportReferralData = () => {
    const csv = referrals.map(r => [
      r.code,
      r.user.name,
      r.user.email,
      r.status,
      r.usageCount,
      r.pointsEarned,
      format(new Date(r.createdAt), 'yyyy-MM-dd HH:mm:ss'),
      r.expiresAt ? format(new Date(r.expiresAt), 'yyyy-MM-dd HH:mm:ss') : 'Never'
    ].join(',')).join('\n');

    const blob = new Blob([csv], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `referrals-${format(new Date(), 'yyyy-MM-dd')}.csv`;
    a.click();
  };

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-900">Referral Tracking</h2>
        <Button onClick={exportReferralData} variant="outline" className="flex items-center">
          <Download className="h-4 w-4 mr-2" />
          Export Data
        </Button>
      </div>

      <div className="bg-white rounded-xl shadow-sm overflow-hidden">
        <div className="p-6 border-b border-gray-200">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="bg-blue-50 p-4 rounded-lg">
              <h3 className="text-lg font-semibold text-blue-900">Total Referrals</h3>
              <p className="text-3xl font-bold text-blue-600">{referrals.length}</p>
            </div>
            <div className="bg-green-50 p-4 rounded-lg">
              <h3 className="text-lg font-semibold text-green-900">Active Codes</h3>
              <p className="text-3xl font-bold text-green-600">
                {referrals.filter(r => r.status === 'active').length}
              </p>
            </div>
            <div className="bg-yellow-50 p-4 rounded-lg">
              <h3 className="text-lg font-semibold text-yellow-900">Total Usage</h3>
              <p className="text-3xl font-bold text-yellow-600">
                {referrals.reduce((sum, r) => sum + r.usageCount, 0)}
              </p>
            </div>
            <div className="bg-purple-50 p-4 rounded-lg">
              <h3 className="text-lg font-semibold text-purple-900">Points Awarded</h3>
              <p className="text-3xl font-bold text-purple-600">
                {referrals.reduce((sum, r) => sum + r.pointsEarned, 0)}
              </p>
            </div>
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Code
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Generated by
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Usage
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Points Earned
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Created
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Expires
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {referrals.map((referral) => (
                <tr key={referral.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap font-mono text-sm">
                    {referral.code}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900">{referral.user.name}</div>
                    <div className="text-sm text-gray-500">{referral.user.email}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <Badge
                      variant={
                        referral.status === 'active' ? 'success' :
                        referral.status === 'expired' ? 'warning' : 'error'
                      }
                    >
                      {referral.status}
                    </Badge>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <span className="text-sm text-gray-900">
                        {referral.usageCount}/{referral.usageLimit}
                      </span>
                      {referral.usageCount >= referral.usageLimit && (
                        <AlertTriangle className="h-4 w-4 text-yellow-500 ml-2" />
                      )}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {referral.pointsEarned}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {format(new Date(referral.createdAt), 'MMM d, yyyy')}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {referral.expiresAt
                      ? format(new Date(referral.expiresAt), 'MMM d, yyyy')
                      : 'Never'}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}